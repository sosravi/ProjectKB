name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd frontend && npm install
        cd ../backend && npm install
        cd ../infrastructure && npm install
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm run test:ci
        
    - name: Run infrastructure tests
      run: |
        cd infrastructure
        npm run test:ci
        
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e:ci

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
        
    - name: Run ESLint
      run: |
        cd frontend && npm run lint
        cd ../backend && npm run lint
        
    - name: Run Prettier
      run: |
        cd frontend && npm run format:check
        cd ../backend && npm run format:check
        
    - name: Type checking
      run: |
        cd frontend && npm run type-check
        cd ../backend && npm run type-check

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
        
    - name: Run security audit
      run: |
        cd frontend && npm audit --audit-level moderate
        cd ../backend && npm audit --audit-level moderate
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd frontend && npm install
        cd ../backend && npm install
        cd ../infrastructure && npm install
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Build backend
      run: |
        cd backend
        npm run build
        
    - name: Build infrastructure
      run: |
        cd infrastructure
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          frontend/build/
          backend/dist/
          infrastructure/cdk.out/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy infrastructure to staging
      run: |
        cd infrastructure
        npm run deploy:staging
        
    - name: Deploy frontend to staging
      run: |
        cd frontend
        npm run deploy:staging
        
    - name: Deploy backend to staging
      run: |
        cd backend
        npm run deploy:staging
        
    - name: Run smoke tests
      run: |
        npm run test:smoke:staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy infrastructure to production
      run: |
        cd infrastructure
        npm run deploy:production
        
    - name: Deploy frontend to production
      run: |
        cd frontend
        npm run deploy:production
        
    - name: Deploy backend to production
      run: |
        cd backend
        npm run deploy:production
        
    - name: Run smoke tests
      run: |
        npm run test:smoke:production
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'Production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
      
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: 'Production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()